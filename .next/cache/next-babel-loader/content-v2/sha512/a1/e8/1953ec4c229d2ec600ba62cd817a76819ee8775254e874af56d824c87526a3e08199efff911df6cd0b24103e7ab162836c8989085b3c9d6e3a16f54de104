{"ast":null,"code":"import _regeneratorRuntime from \"/home/freesby/Desktop/Legal_Docs_Admin-Users/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/freesby/Desktop/Legal_Docs_Admin-Users/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _axios = require(\"axios\");\n\nvar axiosRetry = require(\"axios-retry\");\n\nvar axios = _axios.create();\n\nvar userIp;\n\nvar GetIp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('https://geolocation-db.com/json/', {\n              method: \"GET\",\n              mode: 'cors'\n            });\n\n          case 2:\n            response = _context.sent;\n            console.log(response.json());\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function GetIp() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n_c = GetIp;\nGetIp();\n\nvar retryDelay = function retryDelay() {\n  var retryNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var seconds = Math.pow(2, retryNumber) * 1000;\n  var randomMs = 1000 * Math.random();\n  return seconds + randomMs;\n};\n\naxiosRetry(axios, {\n  retries: 3,\n  retryDelay: retryDelay,\n  retryCondition: axiosRetry.isRetryableError\n});\naxios.defaults.baseURL = \"http://77.122.140.19/\";\naxios.defaults.headers.post['User_IP'] = userIp;\nexport default axios;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetIp\");","map":{"version":3,"sources":["/home/freesby/Desktop/Legal_Docs_Admin-Users/services/axios.js"],"names":["_axios","require","axiosRetry","axios","create","userIp","GetIp","fetch","method","mode","response","console","log","json","retryDelay","retryNumber","seconds","Math","pow","randomMs","random","retries","retryCondition","isRetryableError","defaults","baseURL","headers","post"],"mappings":";;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,OAAD,CAAtB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAME,KAAK,GAAGH,MAAM,CAACI,MAAP,EAAd;;AACA,IAAIC,MAAJ;;AAEA,IAAOC,KAAK;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACUC,KAAK,CAAC,kCAAD,EAAqC;AAACC,cAAAA,MAAM,EAAE,KAAT;AAAgBC,cAAAA,IAAI,EAAE;AAAtB,aAArC,CADf;;AAAA;AACPC,YAAAA,QADO;AAEbC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAAT,EAAZ;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALP,KAAK;AAAA;AAAA;AAAA,GAAZ;;KAAOA,K;AAKPA,KAAK;;AAIL,IAAMQ,UAAU,GAAG,SAAbA,UAAa,GAAqB;AAAA,MAApBC,WAAoB,uEAAN,CAAM;AACtC,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,WAAZ,IAA2B,IAA3C;AACA,MAAMI,QAAQ,GAAG,OAAOF,IAAI,CAACG,MAAL,EAAxB;AACA,SAAOJ,OAAO,GAAGG,QAAjB;AACD,CAJD;;AAKAjB,UAAU,CAACC,KAAD,EAAQ;AAChBkB,EAAAA,OAAO,EAAE,CADO;AAEhBP,EAAAA,UAAU,EAAVA,UAFgB;AAGhBQ,EAAAA,cAAc,EAAEpB,UAAU,CAACqB;AAHX,CAAR,CAAV;AAOApB,KAAK,CAACqB,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;AACAtB,KAAK,CAACqB,QAAN,CAAeE,OAAf,CAAuBC,IAAvB,CAA4B,SAA5B,IAAyCtB,MAAzC;AAEA,eAAeF,KAAf","sourcesContent":["const _axios = require(\"axios\");\nconst axiosRetry = require(\"axios-retry\");\nconst axios = _axios.create();\nlet userIp;\n\nconst  GetIp = async () => {\n  const response = await fetch('https://geolocation-db.com/json/', {method: \"GET\", mode: 'cors'});\n  console.log(response.json());\n}\n\nGetIp();\n\n\n\nconst retryDelay = (retryNumber = 0) => {\n  const seconds = Math.pow(2, retryNumber) * 1000;\n  const randomMs = 1000 * Math.random();\n  return seconds + randomMs;\n};\naxiosRetry(axios, {\n  retries: 3,\n  retryDelay,\n  retryCondition: axiosRetry.isRetryableError,\n});\n\n\naxios.defaults.baseURL = \"http://77.122.140.19/\";\naxios.defaults.headers.post['User_IP'] = userIp;\n\nexport default axios;\n"]},"metadata":{},"sourceType":"module"}