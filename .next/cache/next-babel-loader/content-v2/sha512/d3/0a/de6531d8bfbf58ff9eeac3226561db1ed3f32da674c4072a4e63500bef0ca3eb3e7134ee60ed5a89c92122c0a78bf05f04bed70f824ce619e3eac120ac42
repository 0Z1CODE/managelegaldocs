{"ast":null,"code":"const _axios = require(\"axios\");\n\nconst axiosRetry = require(\"axios-retry\");\n\nconst axios = _axios.create();\n\nlet IP = null;\n\nconst GetIp = async () => {\n  if (IP === null) {\n    const response = await fetch('https://geolocation-db.com/json/', {\n      method: \"GET\",\n      mode: 'cors'\n    }).then(r => r.json()).catch(e => e.json);\n    IP = response.IPv4;\n  }\n\n  return IP;\n};\n\nconst retryDelay = (retryNumber = 0) => {\n  const seconds = Math.pow(2, retryNumber) * 1000;\n  const randomMs = 1000 * Math.random();\n  return seconds + randomMs;\n};\n\naxiosRetry(axios, {\n  retries: 3,\n  retryDelay,\n  retryCondition: axiosRetry.isRetryableError\n});\n\n(async () => {\n  axios.defaults.baseURL = \"http://77.122.140.19/api/\";\n  axios.defaults.headers.post['User_IP'] = await GetIp();\n  axios.defaults.headers.post['Auth_Hash'] = await GetIp();\n})();\n\nexport default axios;","map":{"version":3,"sources":["/home/freesby/Desktop/Legal_Docs_Admin-Users/services/axios.js"],"names":["_axios","require","axiosRetry","axios","create","IP","GetIp","response","fetch","method","mode","then","r","json","catch","e","IPv4","retryDelay","retryNumber","seconds","Math","pow","randomMs","random","retries","retryCondition","isRetryableError","defaults","baseURL","headers","post"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,OAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,KAAK,GAAGH,MAAM,CAACI,MAAP,EAAd;;AACA,IAAIC,EAAE,GAAG,IAAT;;AAEA,MAAOC,KAAK,GAAG,YAAY;AACzB,MAAGD,EAAE,KAAK,IAAV,EAAe;AACb,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAACC,MAAAA,MAAM,EAAE,KAAT;AAAgBC,MAAAA,IAAI,EAAE;AAAtB,KAArC,CAAL,CAAyEC,IAAzE,CAA+EC,CAAD,IAAQA,CAAC,CAACC,IAAF,EAAtF,EAAiGC,KAAjG,CAAwGC,CAAD,IAAQA,CAAC,CAACF,IAAjH,CAAvB;AACAR,IAAAA,EAAE,GAAGE,QAAQ,CAACS,IAAd;AACD;;AACD,SAAOX,EAAP;AACD,CAND;;AAUA,MAAMY,UAAU,GAAG,CAACC,WAAW,GAAG,CAAf,KAAqB;AACtC,QAAMC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,WAAZ,IAA2B,IAA3C;AACA,QAAMI,QAAQ,GAAG,OAAOF,IAAI,CAACG,MAAL,EAAxB;AACA,SAAOJ,OAAO,GAAGG,QAAjB;AACD,CAJD;;AAKApB,UAAU,CAACC,KAAD,EAAQ;AAChBqB,EAAAA,OAAO,EAAE,CADO;AAEhBP,EAAAA,UAFgB;AAGhBQ,EAAAA,cAAc,EAAEvB,UAAU,CAACwB;AAHX,CAAR,CAAV;;AAOA,CAAC,YAAY;AACXvB,EAAAA,KAAK,CAACwB,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;AACAzB,EAAAA,KAAK,CAACwB,QAAN,CAAeE,OAAf,CAAuBC,IAAvB,CAA4B,SAA5B,IAAyC,MAAMxB,KAAK,EAApD;AACAH,EAAAA,KAAK,CAACwB,QAAN,CAAeE,OAAf,CAAuBC,IAAvB,CAA4B,WAA5B,IAA2C,MAAMxB,KAAK,EAAtD;AACD,CAJD;;AAMA,eAAeH,KAAf","sourcesContent":["const _axios = require(\"axios\");\nconst axiosRetry = require(\"axios-retry\");\nconst axios = _axios.create();\nlet IP = null;\n\nconst  GetIp = async () => {\n  if(IP === null){\n    const response = await fetch('https://geolocation-db.com/json/', {method: \"GET\", mode: 'cors'}).then((r) => (r.json())).catch((e) => (e.json));\n    IP = response.IPv4;\n  }\n  return IP;\n}\n\n\n\nconst retryDelay = (retryNumber = 0) => {\n  const seconds = Math.pow(2, retryNumber) * 1000;\n  const randomMs = 1000 * Math.random();\n  return seconds + randomMs;\n};\naxiosRetry(axios, {\n  retries: 3,\n  retryDelay,\n  retryCondition: axiosRetry.isRetryableError,\n});\n\n\n(async () => {\n  axios.defaults.baseURL = \"http://77.122.140.19/api/\";\n  axios.defaults.headers.post['User_IP'] = await GetIp();\n  axios.defaults.headers.post['Auth_Hash'] = await GetIp();\n})();\n\nexport default axios;\n"]},"metadata":{},"sourceType":"module"}